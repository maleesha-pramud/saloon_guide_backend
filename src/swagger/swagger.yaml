openapi: 3.0.0
info:
  title: Saloon Guide API
  description: API documentation for the Saloon Guide application
  version: 1.0.0

servers:
  - url: http://localhost:3000/api/v1
    description: Development server

tags:
  - name: Authentication
    description: Authentication endpoints for login and signup
  - name: Owner Management
    description: Owner user management endpoints
  - name: Guest Management
    description: Guest user management endpoints
  - name: User Management
    description: General user management endpoints

paths:
  # Authentication Routes
  /users/owner/signup:
    post:
      summary: Register a new salon owner account
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: Owner registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Owner registered successfully
                      userId:
                        type: integer
                        example: 1
        "400":
          $ref: "#/components/responses/ValidationError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/ServerError"

  /users/guest/signup:
    post:
      summary: Register a new guest account
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: Guest user registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Guest user registered successfully
                      userId:
                        type: integer
                        example: 3
        "400":
          $ref: "#/components/responses/ValidationError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/ServerError"

  /users/login:
    post:
      summary: User login
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Login successful
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      user:
                        $ref: "#/components/schemas/UserAuthenticated"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid email or password"
        "500":
          $ref: "#/components/responses/ServerError"

  # Owner User Management Routes
  /users/owner:
    get:
      summary: Get all owner users
      tags: [Owner Management]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of owner users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/ServerError"

    post:
      summary: Create a new owner user
      tags: [Owner Management]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: Owner user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User created successfully
                      userId:
                        type: integer
                        example: 2
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/ServerError"

  /users/owner/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Owner User ID
    put:
      summary: Update owner user
      tags: [Owner Management]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: Owner user updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User updated successfully
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/ServerError"

  # Guest User Management Routes
  /users/guest:
    get:
      summary: Get all guest users
      tags: [Guest Management]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of guest users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/ServerError"

    post:
      summary: Create a new guest user
      tags: [Guest Management]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: Guest user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User created successfully
                      userId:
                        type: integer
                        example: 3
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/ServerError"

  /users/guest/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Guest User ID
    put:
      summary: Update guest user
      tags: [Guest Management]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: Guest user updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User updated successfully
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/ServerError"

  # General User Management Routes
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: User ID
    get:
      summary: Get user by ID
      tags: [User Management]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServerError"

    delete:
      summary: Delete user
      tags: [User Management]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User deleted successfully
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServerError"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Maleesha Pramud
        email:
          type: string
          format: email
          example: maleeshapramud2005@gmail.com
        phone:
          type: string
          nullable: true
          example: "0701549092"
        role_id:
          type: integer
          example: 2
          description: User role ID (1=admin, 2=owner, 3=guest)
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateUser:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: Maleesha Pramud
        email:
          type: string
          format: email
          example: maleeshapramud2005@gmail.com
        password:
          type: string
          minLength: 6
          example: Password123
        phone:
          type: string
          pattern: "^\\+?[0-9]{10,15}$"
          nullable: true
          example: "0701549092"

    UpdateUser:
      type: object
      minProperties: 1
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: John Smith
        email:
          type: string
          format: email
          example: john.smith@example.com
        phone:
          type: string
          pattern: "^\\+?[0-9]{10,15}$"
          nullable: true
          example: "0701549092"
        password:
          type: string
          minLength: 6
          example: NewPassword123

    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: maleeshapramud2005@gmail.com
        password:
          type: string
          example: Password123

    UserAuthenticated:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Maleesha Pramud
        email:
          type: string
          format: email
          example: maleeshapramud2005@gmail.com
        phone:
          type: string
          nullable: true
          example: "0701549092"
        role_id:
          type: integer
          example: 2
          description: User role ID (1=admin, 2=owner, 3=guest)

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: User not found

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Password must be at least 6 characters long"

    ConflictError:
      description: Resource conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Email already exists"

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Unauthorized - No token provided"

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Forbidden - Admin access required"

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Error fetching users"
